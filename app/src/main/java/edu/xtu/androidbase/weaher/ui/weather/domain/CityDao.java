package edu.xtu.androidbase.weaher.ui.weather.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_City".
*/
public class CityDao extends AbstractDao<City, String> {

    public static final String TABLENAME = "T_City";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CitySort = new Property(0, String.class, "citySort", true, "citySort");
        public final static Property CityName = new Property(1, String.class, "cityName", false, "cityName");
        public final static Property ProID = new Property(2, String.class, "proID", false, "proID");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        String citySort = entity.getCitySort();
        if (citySort != null) {
            stmt.bindString(1, citySort);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String proID = entity.getProID();
        if (proID != null) {
            stmt.bindString(3, proID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        String citySort = entity.getCitySort();
        if (citySort != null) {
            stmt.bindString(1, citySort);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String proID = entity.getProID();
        if (proID != null) {
            stmt.bindString(3, proID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // citySort
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // proID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCitySort(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(City entity, long rowId) {
        return entity.getCitySort();
    }
    
    @Override
    public String getKey(City entity) {
        if(entity != null) {
            return entity.getCitySort();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        return entity.getCitySort() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
