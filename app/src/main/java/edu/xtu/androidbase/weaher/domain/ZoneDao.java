package edu.xtu.androidbase.weaher.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_Zone".
*/
public class ZoneDao extends AbstractDao<Zone, Integer> {

    public static final String TABLENAME = "T_Zone";

    /**
     * Properties of entity Zone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ZoneId = new Property(0, int.class, "zoneId", true, "ZoneID");
        public final static Property ZoneName = new Property(1, String.class, "zoneName", false, "ZoneName");
        public final static Property CityId = new Property(2, String.class, "cityId", false, "CityID");
    }


    public ZoneDao(DaoConfig config) {
        super(config);
    }
    
    public ZoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Zone entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getZoneId());
 
        String zoneName = entity.getZoneName();
        if (zoneName != null) {
            stmt.bindString(2, zoneName);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(3, cityId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Zone entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getZoneId());
 
        String zoneName = entity.getZoneName();
        if (zoneName != null) {
            stmt.bindString(2, zoneName);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(3, cityId);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Zone readEntity(Cursor cursor, int offset) {
        Zone entity = new Zone( //
            cursor.getInt(offset + 0), // zoneId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // zoneName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Zone entity, int offset) {
        entity.setZoneId(cursor.getInt(offset + 0));
        entity.setZoneName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCityId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Zone entity, long rowId) {
        return entity.getZoneId();
    }
    
    @Override
    public Integer getKey(Zone entity) {
        if(entity != null) {
            return entity.getZoneId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Zone entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
